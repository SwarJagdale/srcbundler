``` asd.js

```
``` components\Gameover.js
import{useGame}from"../context/GameContext"const Gameover=({won,correctWord,attempts,onNewGame})=>{const{gameStats}=useGame()return(<div className="gameover-modal"><div className="gameover-content"><h2>{won?"Congratulations!":"Game Over"}</h2><p>{won?`You guessed the word in ${attempts.length} ${attempts.length === 1 ? "try" : "tries"}!`:`The word was ${correctWord}.`}</p><div className="stats-container"><div className="stat-box"><h3>Statistics</h3><div className="stats-grid"><div className="stat-item"><div className="stat-number">{gameStats.played}</div><div className="stat-label">Played</div></div><div className="stat-item"><div className="stat-number">{Math.round((gameStats.wins/gameStats.played)*100)||0}%</div><div className="stat-label">Win%</div></div><div className="stat-item"><div className="stat-number">{gameStats.currentStreak}</div><div className="stat-label">Current Streak</div></div><div className="stat-item"><div className="stat-number">{gameStats.maxStreak}</div><div className="stat-label">Max Streak</div></div></div></div>{won&&(<div className="guess-distribution"><h3>Guess Distribution</h3>{Object.entries(gameStats.guessDistribution).map(([guess,count])=>(<div key={guess}className="distribution-row"><div className="guess-number">{guess}</div><div className="guess-bar-container"><div className={`guess-bar ${Number(guess) === attempts.length ? "current" : ""}`}style={{width:`${Math.max(count * 5, count > 0 ? 10 : 0)}%`,}}>{count}</div></div></div>))}</div>)}</div><button className="new-game-button"onClick={onNewGame}>Play Again</button></div></div>)}export default Gameover
```
``` components\Header.js
"use client"import{useRouter}from"next/router"import{useGame}from"../context/GameContext"const Header=()=>{const{user,logout}=useGame()const router=useRouter()const handleLogout=()=>{logout()router.push("/")}return(<header className="game-header"><div className="header-left"><button className="icon-button"aria-label="Help"><svg xmlns="http://www.w3.org/2000/svg"viewBox="0 0 24 24"fill="none"stroke="currentColor"strokeWidth="2"strokeLinecap="round"strokeLinejoin="round"><circle cx="12"cy="12"r="10"></circle><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path><line x1="12"y1="17"x2="12.01"y2="17"></line></svg></button></div><h1 className="game-title">WORDLE</h1><div className="header-right"><div className="user-info"><span>Hi,{user?.username}</span><button className="logout-button"onClick={handleLogout}>Logout</button></div></div></header>)}export default Header
```
``` components\Keyboard.js
const Keyboard=({onKeyPress,usedLetters})=>{const keyboardRows=[["Q","W","E","R","T","Y","U","I","O","P"],["A","S","D","F","G","H","J","K","L"],["ENTER","Z","X","C","V","B","N","M","BACKSPACE"],]return(<div className="keyboard">{keyboardRows.map((row,rowIndex)=>(<div key={rowIndex}className="keyboard-row">{row.map((key)=>{const isSpecial=key==="ENTER"||key==="BACKSPACE"const status=usedLetters[key]||""return(<button key={key}className={`keyboard-key ${isSpecial ? "keyboard-key-wide" : ""} ${status}`}onClick={()=>onKeyPress(key)}>{key==="BACKSPACE"?"âŒ«":key}</button>)})}</div>))}</div>)}export default Keyboard
```
``` components\Login.js
"use client"import{useState}from"react"import{useRouter}from"next/router"import{useGame}from"../context/GameContext"const Login=()=>{const[username,setUsername]=useState("")const[password,setPassword]=useState("")const[error,setError]=useState("")const[isLoading,setIsLoading]=useState(false)const{login}=useGame()const router=useRouter()const handleLogin=(e)=>{e.preventDefault()if(username.trim()&&password.trim()){setIsLoading(true)setTimeout(()=>{login(username)router.push("/game")},800)}else{setError("Please enter both username and password")}}return(<div className="login-container"><form onSubmit={handleLogin}className="login-form"><h2>Login to Play</h2>{error&&<div className="error-message">{error}</div>}<div className="form-group"><label htmlFor="username">Username</label><input id="username"type="text"placeholder="Enter your username"value={username}onChange={(e)=>setUsername(e.target.value)}className="form-input"disabled={isLoading}/></div><div className="form-group"><label htmlFor="password">Password</label><input id="password"type="password"placeholder="Enter your password"value={password}onChange={(e)=>setPassword(e.target.value)}className="form-input"disabled={isLoading}/></div><button type="submit"className="login-button"disabled={isLoading}>{isLoading?"Logging in...":"Login"}</button></form></div>)}export default Login
```
``` components\WordleGrid.js
import{forwardRef}from"react"const WordleGrid=forwardRef(({attempts,currentAttempt,correctWord,shake},ref)=>{const getColorClass=(letter,index,attempt,attemptIndex)=>{if(!letter)return""if(attemptIndex<attempts.length){if(correctWord[index]===letter){return"correct"}else if(correctWord.includes(letter)){const correctOccurrences=correctWord.split("").filter((l)=>l===letter).length let correctPositions=0for(let i=0;i<attempt.length;i++){if(attempt[i]===letter&&correctWord[i]===letter){correctPositions++}}let presentBefore=0for(let i=0;i<index;i++){if(attempt[i]===letter&&correctWord[i]!==letter){presentBefore++}}if(presentBefore+correctPositions<correctOccurrences){return"present"}else{return"absent"}}else{return"absent"}}return""}return(<div className="wordle-grid"ref={ref}>{Array.from({length:6}).map((_,rowIndex)=>{const attempt=attempts[rowIndex]||""const isCurrentRow=rowIndex===attempts.length const rowClass=isCurrentRow&&shake?"wordle-row shake":"wordle-row"return(<div key={rowIndex}className={rowClass}>{Array.from({length:5}).map((_,colIndex)=>{const letter=attempts[rowIndex]?.[colIndex]||(isCurrentRow?currentAttempt[colIndex]:"")const colorClass=getColorClass(letter,colIndex,attempt,rowIndex)const cellStatus=rowIndex<attempts.length?"revealed":isCurrentRow&&letter?"filled":""return(<div key={colIndex}className={`wordle-cell ${colorClass} ${cellStatus}`}style={{transitionDelay:`${colIndex * 100}ms`,animationDelay:`${colIndex * 100}ms`,}}>{letter}</div>)})}</div>)})}</div>)})WordleGrid.displayName="WordleGrid"export default WordleGrid
```
``` Gameover.js
import{useGame}from"../context/GameContext"const Gameover=({won,correctWord,attempts,onNewGame})=>{const{gameStats}=useGame()return(<div className="gameover-modal"><div className="gameover-content"><h2>{won?"Congratulations!":"Game Over"}</h2><p>{won?`You guessed the word in ${attempts.length} ${attempts.length === 1 ? "try" : "tries"}!`:`The word was ${correctWord}.`}</p><div className="stats-container"><div className="stat-box"><h3>Statistics</h3><div className="stats-grid"><div className="stat-item"><div className="stat-number">{gameStats.played}</div><div className="stat-label">Played</div></div><div className="stat-item"><div className="stat-number">{Math.round((gameStats.wins/gameStats.played)*100)||0}%</div><div className="stat-label">Win%</div></div><div className="stat-item"><div className="stat-number">{gameStats.currentStreak}</div><div className="stat-label">Current Streak</div></div><div className="stat-item"><div className="stat-number">{gameStats.maxStreak}</div><div className="stat-label">Max Streak</div></div></div></div>{won&&(<div className="guess-distribution"><h3>Guess Distribution</h3>{Object.entries(gameStats.guessDistribution).map(([guess,count])=>(<div key={guess}className="distribution-row"><div className="guess-number">{guess}</div><div className="guess-bar-container"><div className={`guess-bar ${Number(guess) === attempts.length ? "current" : ""}`}style={{width:`${Math.max(count * 5, count > 0 ? 10 : 0)}%`,}}>{count}</div></div></div>))}</div>)}</div><button className="new-game-button"onClick={onNewGame}>Play Again</button></div></div>)}export default Gameover
```
``` Header.js
"use client"import{useRouter}from"next/router"import{useGame}from"../context/GameContext"const Header=()=>{const{user,logout}=useGame()const router=useRouter()const handleLogout=()=>{logout()router.push("/")}return(<header className="game-header"><div className="header-left"><button className="icon-button"aria-label="Help"><svg xmlns="http://www.w3.org/2000/svg"viewBox="0 0 24 24"fill="none"stroke="currentColor"strokeWidth="2"strokeLinecap="round"strokeLinejoin="round"><circle cx="12"cy="12"r="10"></circle><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path><line x1="12"y1="17"x2="12.01"y2="17"></line></svg></button></div><h1 className="game-title">WORDLE</h1><div className="header-right"><div className="user-info"><span>Hi,{user?.username}</span><button className="logout-button"onClick={handleLogout}>Logout</button></div></div></header>)}export default Header
```
